services:
  postgres-prod:
    image: postgres:${POSTGRES_VERSION}
    container_name: tempo-postgres-prod
    environment:
      POSTGRES_DB: ${DB_PROD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${DB_USER} -d ${DB_PROD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: ["5432:5432"]
    volumes:
      - pgdata_prod:${PGDATA_PROD}
    networks: [tempo]

  postgres-test:
    image: postgres:${POSTGRES_VERSION}
    container_name: tempo-postgres-test
    environment:
      POSTGRES_DB: ${DB_TEST}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${DB_USER} -d ${DB_TEST}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: ["5433:5432"]
    volumes:
      - pgdata_test:${PGDATA_TEST}
    networks: [tempo]

  api:
    build:
      context: ./tempo-cargo/tempo-cargo-api
      dockerfile: Dockerfile
    image: ${APP_IMAGE}
    container_name: tempo-api
    hostname: api
    domainname: tempocargo.lat
    depends_on:
      postgres-prod:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres-prod
      DB_PORT: 5432
      DB_NAME: ${DB_PROD}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      JWT_SECRET: ${JWT_SECRET:-change-me-32+chars}
    expose: ["8080"]
    networks: [tempo]

  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: npm
    restart: unless-stopped
    ports:
      - "80:80"    # HTTP
      - "81:81"    # Admin UI
      - "443:443"  # HTTPS
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    networks: [tempo]

  sonarqube-db:
    image: postgres:15
    container_name: sonarqube-db
    restart: always
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    networks: [tempo]

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      - sonarqube-db
    restart: always
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    ports:
      - "9000:9000"
    networks: [tempo]

volumes:
  pgdata_prod: {}
  pgdata_test: {}
  sonarqube_db_data:
  sonarqube_data:
  sonarqube_extensions:

networks:
  tempo: {}